name: All-Platform Pull and Save Docker Image

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写docker镜像名称 多个用英文逗号分开'
        required: true
        default: 'alpine:latest,busybox:stable-glibc'  # 设置默认的 Docker 镜像列表

jobs:
  inspect_platforms:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect image manifest
        run: |
          images="${{ github.event.inputs.docker_images }}"
          IFS=',' read -r -a image_array <<< "$images"
          for image in "${image_array[@]}"; do
            > platforms.txt
            docker buildx imagetools inspect ${image} --raw | \
            jq -r '
              if .manifests then
                .manifests[].platform | 
                "\(.os)/\(.architecture)\(if .variant then "/"+.variant else "" end)"
              else
                "\(.os)/\(.architecture)\(if .variant then "/"+.variant else "" end)"
              end' | \
            sort | uniq > platforms.txt
            echo "镜像：${image}，支持平台：$(tr '\n' ',' < platforms.txt)"
            
            while IFS= read -r line; do
              docker pull "${image}" --platform "${line}"
              image_name="${image//\//_}"
              image_name="${image_name//:/_}"
              tag_name="${line//\//_}"
              docker save "${image}" -o "${image_name}-${tag_name}.tar"
              gzip -c "${image_name}-${tag_name}.tar" > "${image_name}-${tag_name}.tar.gz"
              rm "${image_name}-${tag_name}.tar"
              echo "下载打包成功： ${image_name}-${tag_name}.tar.gz"
            done < platforms.txt
          done

      - name: List generated files (debug step)
        run: |
          echo "Preparing docker images list (.tar.gz) files:"
          find $GITHUB_WORKSPACE -name "*.tar.gz"
          release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@master
        with:
          tag_name: DockerTarBuilder-All-Platfrom
          name: ${{ env.RELEASE_NAME }} for All-Platfrom
          body: |
            [![Github](https://img.shields.io/badge/RELEASE:DockerTarBuilder-123456?logo=github&logoColor=fff&labelColor=green&style=for-the-badge)](https://www.bilibili.com/video/BV1EZ421M7mL) [![Github](https://img.shields.io/badge/国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.top/archives/1)
            ### How to use? For example
            `docker load -i alpine_latest.tar.gz `
            ### Video teaching
            [![Bilibili](https://img.shields.io/badge/Bilibili-123456?logo=bilibili&logoColor=fff&labelColor=fb7299)](https://www.bilibili.com/video/BV1yyq6YREdF)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Docker images as release assets
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: DockerTarBuilder-All-Platfrom
          files: ${{ github.workspace }}/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
